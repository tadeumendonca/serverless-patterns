## Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito to API Gateway HTTP API (JWT)
    
Parameters:
  TestWithPostman:
    Description: Do you need to test with Postman? (Not recommended for production)
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  SubDomainName:
    Description: Provide your application sub-domain under your organization root domain.
    Type: String
  DomainName:
    Description: Provide your organization root domain.
    Type: String
  CertificateArn:
    Description: Provide your managed certficate ARN on AWS Certificate Manager.
    Type: String
  HostedZoneId:
    Description: Provide your Route53 domain hosted zone id.
    Type: String

Resources:
  # Creates a nested stack with the required Cognito requirements
  AuthStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./auth.yaml
      Parameters:
        ClientDomain: !Join ["", ["https://", !Ref DomainName]]
        Postman: !Ref TestWithPostman

  # Creates an API Gateway HTTP API endpoint with JWT authorization
  AppApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: Cognito to HTTP API demo
      DisableExecuteApiEndpoint: true
      Domain:
        CertificateArn: !Ref CertificateArn
        DomainName: !Join [ ".", [ !Ref SubDomainName, !Ref DomainName ] ]
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
      CorsConfiguration:
        AllowMethods:
          - GET
        AllowOrigins:
          - !Join ["", ["https://", !Ref DomainName]]
      Auth:
        Authorizers:
          OAuth2Authorizer:
            AuthorizationScopes:
              - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !GetAtt AuthStack.Outputs.Issuer
              audience:
                - !GetAtt AuthStack.Outputs.UserPoolClientId
        DefaultAuthorizer: OAuth2Authorizer
                
  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.handler
      Runtime: nodejs14.x
      Events:
        AppApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref AppApi
            Path: /api
            Method: get

Outputs:
  ApiEndpoint:
    Description: API Endpoint
    Value: !Sub "https://${SubDomainName}.${DomainName}/api"
  AuthUrl:
    Description: Url used to authenticate
    Value: !GetAtt AuthStack.Outputs.AuthUrl
  ClientId:
    Description: Application client ID
    Value: !GetAtt AuthStack.Outputs.UserPoolClientId
